<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        WqIAiIgCIiAIiIAiIgCIiAIiIAiIgP/Z
</value>
  </data>
</root>